// <auto-generated />
using System;
using System.Collections.Generic;
using AdvancedWorkloadGenerator.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AdvancedWorkloadGenerator.Data.Migrations
{
    [DbContext(typeof(GeneratorDbContext))]
    [Migration("20250806115900_AddIndexNameAndIsUniqueIndexColumns")]
    partial class AddIndexNameAndIsUniqueIndexColumns
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("AdvancedWorkloadGenerator.Core.Entities.DBConnection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConnectionString")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("DatabaseName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("DatabaseType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAnalyzed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastAnalyzedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Port")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Connections");
                });

            modelBuilder.Entity("AdvancedWorkloadGenerator.Core.Entities.DBTable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DatabaseConnectionId")
                        .HasColumnType("TEXT");

                    b.Property<int>("RecordCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<string>("Schema")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DatabaseConnectionId");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("AdvancedWorkloadGenerator.Core.Entities.DBTableAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AttributeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("DefaultValue")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("IndexName")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsForeignKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsNullable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsPrimaryKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsUnique")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsUniqueIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int?>("MaxLength")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrdinalPosition")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReferencedAttributeName")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ReferencedTableId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReferencedTableName")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ReferencedTableId");

                    b.HasIndex("TableId");

                    b.ToTable("Columns");
                });

            modelBuilder.Entity("AdvancedWorkloadGenerator.Core.Entities.QueryGenerationRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DatabaseConnectionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<int>("ExecutedQueries")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<int>("ExecutionStatus")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("FinishedExecutionAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FinishedGenerationAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("GeneratedQueries")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<int>("GenerationStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RequestName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("ResultCSVPath")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ResultFilePath")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StartedExecutionAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StartedGenerationAt")
                        .HasColumnType("TEXT");

                    b.ComplexProperty<Dictionary<string, object>>("Parameters", "AdvancedWorkloadGenerator.Core.Entities.QueryGenerationRequest.Parameters#QueryGenerationParameters", b1 =>
                        {
                            b1.Property<bool>("AdvancedQueries")
                                .HasColumnType("INTEGER");

                            b1.Property<double>("IndexHintProbability")
                                .HasColumnType("REAL");

                            b1.Property<int>("MaxJoins")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("MaxNoAggregates")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("MaxNoPredicates")
                                .HasColumnType("INTEGER");

                            b1.Property<double>("NoIndexHintProbability")
                                .HasColumnType("REAL");

                            b1.Property<int>("NumQueries")
                                .HasColumnType("INTEGER");

                            b1.Property<double>("PhysicalOperatorHintProbability")
                                .HasColumnType("REAL");

                            b1.Property<int>("Seed")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("UseIndexHints")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("UsePhysicalOperatorHints")
                                .HasColumnType("INTEGER");
                        });

                    b.HasKey("Id");

                    b.HasIndex("DatabaseConnectionId");

                    b.ToTable("GenerationRequests");
                });

            modelBuilder.Entity("AdvancedWorkloadGenerator.Core.Entities.DBTable", b =>
                {
                    b.HasOne("AdvancedWorkloadGenerator.Core.Entities.DBConnection", "DatabaseConnection")
                        .WithMany("DatabaseTables")
                        .HasForeignKey("DatabaseConnectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DatabaseConnection");
                });

            modelBuilder.Entity("AdvancedWorkloadGenerator.Core.Entities.DBTableAttribute", b =>
                {
                    b.HasOne("AdvancedWorkloadGenerator.Core.Entities.DBTable", "ReferencedTable")
                        .WithMany()
                        .HasForeignKey("ReferencedTableId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AdvancedWorkloadGenerator.Core.Entities.DBTable", "Table")
                        .WithMany("TableAttributes")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReferencedTable");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("AdvancedWorkloadGenerator.Core.Entities.QueryGenerationRequest", b =>
                {
                    b.HasOne("AdvancedWorkloadGenerator.Core.Entities.DBConnection", "DatabaseConnection")
                        .WithMany()
                        .HasForeignKey("DatabaseConnectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DatabaseConnection");
                });

            modelBuilder.Entity("AdvancedWorkloadGenerator.Core.Entities.DBConnection", b =>
                {
                    b.Navigation("DatabaseTables");
                });

            modelBuilder.Entity("AdvancedWorkloadGenerator.Core.Entities.DBTable", b =>
                {
                    b.Navigation("TableAttributes");
                });
#pragma warning restore 612, 618
        }
    }
}
